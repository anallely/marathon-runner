def currentVersion = '0.1.0-SNAPSHOT'

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'maven'

    version = currentVersion
    group = 'gex.marathon'

    sourceCompatibility = '1.8'

    dependencies {
        compile 'org.codehaus.groovy:groovy-all:2.3.6'
        testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    }   

    def deploymentRepo = version.endsWith("-SNAPSHOT")?"http://nexus.plataforma.virginia.exp.mx/nexus/content/repositories/snapshots/":
        "http://nexus.plataforma.virginia.exp.mx/nexus/content/repositories/releases/"

    def username
    def password

    if(project.hasProperty('nexusUsername') && project.hasProperty('nexusPassword')) {
        username = project['nexusUsername']
        password = project['nexusPassword']
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: deploymentRepo) {
                    authentication(userName: username, password: password)
                }
                pom.version = project.version
                pom.artifactId = project.name
                pom.groupId = project.group
            }
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()

        maven {
            name "expansion"
            url "http://nexus.plataforma.virginia.exp.mx/nexus/content/repositories/releases/"
        }   
    }   
}


task buildZip(type: Zip, dependsOn:['cli:shadowJar']) {
  def distribution = 'distribution'

  // Deleting last distribution
  delete "${buildDir}"

  // Creating file tree
  def distributionDir = new File(buildDir, distribution)
  def bin = new File(buildDir, "${distribution}/bin")
  def libs = new File(buildDir, "${distribution}/libs")
  distributionDir.mkdirs()
  bin.mkdirs()
  libs.mkdirs()

  // Copying jar to libs
  copy {
    from "cli/build/libs/cli-${currentVersion}-all.jar"
    into "${buildDir}/${distribution}/libs/"
  }

  // Creating marathon from template and copying to bin
  copy {
    from "marathon"
    into "${buildDir}/${distribution}/bin/"
  }

  def marathonFile = new File('marathon')
  def x = marathonFile.text.replace('${version}', "${currentVersion}")

  def marathon = new File("${buildDir}/${distribution}/bin/", "marathon")
  marathon.withWriter{ it << x }

  from "${buildDir}/${distribution}"
  archiveName "${buildDir}/marathon.zip"

}
