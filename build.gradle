def distribution = 'distribution'
def currentVersion = '0.1.4-SNAPSHOT'

apply plugin: 'java'

subprojects {
  apply plugin: 'groovy'
  apply plugin: 'maven'
  apply plugin: 'java'

  version = currentVersion
  group = 'gex.marathon'

  sourceCompatibility = '1.8'

  dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.9'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
  }

  def deploymentRepo = version.endsWith("-SNAPSHOT") ? "http://nexus.plataforma.virginia.exp.mx/nexus/content/repositories/snapshots/" :
    "http://nexus.plataforma.virginia.exp.mx/nexus/content/repositories/releases/"

  def username
  def password

  if (project.hasProperty('nexusUsername') && project.hasProperty('nexusPassword')) {
    username = project['nexusUsername']
    password = project['nexusPassword']
  }




  uploadArchives {
    repositories {
      mavenDeployer {
        repository(url: deploymentRepo) {
          authentication(userName: username, password: password)
        }
        pom.version = project.version
        pom.artifactId = project.name
        pom.groupId = project.group
      }
    }
  }
}

allprojects {
  repositories {
    mavenCentral()
    mavenLocal()

    maven {
      name "expansion"
      url "http://nexus.plataforma.virginia.exp.mx/nexus/content/repositories/releases/"
    }

  }
}

task prepareDist(dependsOn: [':cli:shadowJar']) {

  // Creating file tree
  def distributionDir = new File(buildDir, distribution)
  def bin = new File(buildDir, "${distribution}/bin")
  def libs = new File(buildDir, "${distribution}/libs")
  distributionDir.mkdirs()
  bin.mkdirs()
  libs.mkdirs()

  doLast {
    // Copy fat jar to lib
    def file = new File("${projectDir}", "cli/build/libs/cli-${currentVersion}-all.jar");
    File dir = new File("${buildDir}/${distribution}/libs");
    file.renameTo(new File(dir, file.getName()));

    // Generates bash file from template
    def marathonFile = new File("${projectDir}", 'marathon')
    def x = marathonFile.text.replace('${version}', "${currentVersion}")

    def marathon = new File("${buildDir}/${distribution}/bin/", "marathon")
    marathon.withWriter { it << x }

    marathon.setReadable(true);
    marathon.setReadable(true);
    marathon.setExecutable(true, false);
  }
}


task buildZip(type: Zip, dependsOn: ['prepareDist']) {
  from "${buildDir}/${distribution}"
  archiveName "${buildDir}/marathon.zip"
}

uploadArchives.dependsOn ':core:uploadArchives'